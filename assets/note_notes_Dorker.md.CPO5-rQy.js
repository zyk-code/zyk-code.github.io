import{_ as e,c as t,o as r,a5 as a,ae as s}from"./chunks/framework.CAsUj2FB.js";const b=JSON.parse('{"title":"Docker","description":"","frontmatter":{},"headers":[],"relativePath":"note/notes/Dorker.md","filePath":"note/notes/Dorker.md","lastUpdated":1713972979000}'),n={name:"note/notes/Dorker.md"},o=a(`<h1 id="docker" tabindex="-1">Docker <a class="header-anchor" href="#docker" aria-label="Permalink to &quot;Docker&quot;">​</a></h1><p><a href="https://docker.easydoc.net" target="_blank" rel="noreferrer">docker教程</a></p><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>Docker 是一个应用打包、分发、部署的工具。</p><p>你也可以把它理解为一个轻量的虚拟机，它只虚拟部署软件所需的运行环境。</p><table><thead><tr><th>特性</th><th style="text-align:center;">普通虚拟机</th><th style="text-align:right;">Docker</th></tr></thead><tbody><tr><td>跨平台</td><td style="text-align:center;">通常只能在桌面级系统运行</td><td style="text-align:right;">支持的系统非常多</td></tr><tr><td>性能</td><td style="text-align:center;">性能损耗大，内存占用高</td><td style="text-align:right;">性能好，只虚拟软件所需运行环境，最大化减少没用的配置</td></tr><tr><td>自动化</td><td style="text-align:center;">需要手动安装所有东西</td><td style="text-align:right;">运行一次命令就可以自动部署好所需环境</td></tr><tr><td>稳定性</td><td style="text-align:center;">稳定性不高，不同系统差异大</td><td style="text-align:right;">稳定性好，不同系统都一样部署方式</td></tr></tbody></table><h3 id="dorker的内容" tabindex="-1">Dorker的内容 <a class="header-anchor" href="#dorker的内容" aria-label="Permalink to &quot;Dorker的内容&quot;">​</a></h3><p><strong>容器</strong>：软件安装后的状态，每个软件运行环境都是独立的、隔离的，称之为容器。</p><p><strong>镜像</strong>：可以理解为软件安装包，可以方便的进行传播和安装。可以包含多个容器。更像一个操作系统，然而它只是提供软件所需的东西。</p><p><strong>Dorkerfile</strong>；一个自动化脚本，用于自动化创建镜像。</p><h3 id="dorker的作用" tabindex="-1">Dorker的作用 <a class="header-anchor" href="#dorker的作用" aria-label="Permalink to &quot;Dorker的作用&quot;">​</a></h3><p><strong>打包</strong>：就是把你软件运行所需的依赖、第三方库、软件打包到一起，变成一个安装包。</p><p><strong>分发</strong>：你可以把你打包好的“安装包”上传到一个镜像仓库，其他人可以非常方便的获取和安装。</p><p><strong>部署</strong>：拿着“安装包”就可以一个命令运行起来你的应用，自动模拟出一摸一样的运行环境，不管是在。</p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p><a href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noreferrer">桌面版</a></p><p><a href="https://docs.docker.com/engine/install/#server" target="_blank" rel="noreferrer">服务器版</a></p><h3 id="镜像源" tabindex="-1">镜像源 <a class="header-anchor" href="#镜像源" aria-label="Permalink to &quot;镜像源&quot;">​</a></h3><table><thead><tr><th>镜像加速器</th><th style="text-align:center;">镜像加速器地址</th></tr></thead><tbody><tr><td>Docker 中国官方镜像</td><td style="text-align:center;"><a href="https://registry.docker-cn.com" target="_blank" rel="noreferrer">https://registry.docker-cn.com</a></td></tr><tr><td>DaoCloud 镜像站</td><td style="text-align:center;"><a href="http://f1361db2.m.daocloud.io" target="_blank" rel="noreferrer">http://f1361db2.m.daocloud.io</a></td></tr><tr><td>Azure 中国镜像</td><td style="text-align:center;"><a href="https://dockerhub.azk8s.cn" target="_blank" rel="noreferrer">https://dockerhub.azk8s.cn</a></td></tr><tr><td>科大镜像站</td><td style="text-align:center;"><a href="https://docker.mirrors.ustc.edu.cn" target="_blank" rel="noreferrer">https://docker.mirrors.ustc.edu.cn</a></td></tr><tr><td>阿里云</td><td style="text-align:center;"><a href="https://ud6340vz.mirror.aliyuncs.com" target="_blank" rel="noreferrer">https://ud6340vz.mirror.aliyuncs.com</a></td></tr><tr><td>网易云</td><td style="text-align:center;"><a href="https://hub-mirror.c.163.com" target="_blank" rel="noreferrer">https://hub-mirror.c.163.com</a></td></tr><tr><td>腾讯云</td><td style="text-align:center;"><a href="https://mirror.ccs.tencentyun.com" target="_blank" rel="noreferrer">https://mirror.ccs.tencentyun.com</a></td></tr></tbody></table><h2 id="dorker基本命令-与-dorkerfile" tabindex="-1">Dorker基本命令 与 Dorkerfile <a class="header-anchor" href="#dorker基本命令-与-dorkerfile" aria-label="Permalink to &quot;Dorker基本命令 与 Dorkerfile&quot;">​</a></h2><h3 id="基本命令" tabindex="-1">基本命令 <a class="header-anchor" href="#基本命令" aria-label="Permalink to &quot;基本命令&quot;">​</a></h3><p><code>docker build -t my-image .</code> 创建镜像</p><p><code>docker run -p 80:5000 -d my-image</code> 启动容器 -p：将本地端口80映射为容器端口5000, -d：容器在后台运行</p><p><code>docker ps </code>查看当前运行中的容器</p><p><code>docker images</code> 查看镜像列表</p><p><code>docker rm container-id</code> 删除指定 id 的容器</p><p><code>docker stop/start/restart container-id</code> 停止/启动指定 id 的容器</p><p><code>docker rmi image-id</code> 删除指定 id 的镜像</p><p><code>docker volume ls</code> 查看 volume 列表</p><p><code>docker network ls</code> 查看网络列表</p><h3 id="dorkerfile" tabindex="-1">Dorkerfile <a class="header-anchor" href="#dorkerfile" aria-label="Permalink to &quot;Dorkerfile&quot;">​</a></h3><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用的镜像</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">FORM python:3.8-slim-buster</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 工作目录，可以理解为进入的目录，如果目录不存在会自动创建</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">WORK /app</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将本地目录的文件拷贝到dorker镜像中的目录</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">COPY . .</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># shell 命令</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">RUN pip install</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 创建镜像时使用，更像是在系统中配置一些环境包的操作</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">CMD [&quot;python3&quot;, &quot;app.py&quot;]# 使用容器时使用，更像是运行代码的操作。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="目录挂载" tabindex="-1">目录挂载 <a class="header-anchor" href="#目录挂载" aria-label="Permalink to &quot;目录挂载&quot;">​</a></h2><p>1、dorker容器启动需要build和run,代码更新时需要重新执行。</p><p>2、dorker容器删除后，文件也会直接清楚。例如：日志文件、数据库等。</p><p>为了解决上面的问题，可以通过目录挂载解决。</p><h3 id="挂载方式" tabindex="-1">挂载方式 <a class="header-anchor" href="#挂载方式" aria-label="Permalink to &quot;挂载方式&quot;">​</a></h3><p><strong>bind mount</strong>：直接把宿主机目录映射到容器内，适合挂代码目录和配置文件。可挂到多个容器上。</p><p><strong>volume</strong>； 由容器创建和管理，创建在宿主机，所以删除容器不会丢失，官方推荐，更高效，Linux 文件系统，适合存储数据库数据。可挂到多个容器上。启动容器命令中追加<code>-v my-image-data: path</code> my-image-data表示的是<strong>volume</strong>的名字。</p><p><strong>tmpfs mount</strong>： 适合存储临时文件，存宿主机内存中。不可多容器共享。</p><p><img src="`+s+'" alt="示意图" loading="lazy"></p><h2 id="dorker-compose" tabindex="-1">Dorker-compose <a class="header-anchor" href="#dorker-compose" aria-label="Permalink to &quot;Dorker-compose&quot;">​</a></h2><p>可以将数据库和代码分离在不同的容器中。Dorker-compose是将这些容器启动的自动化。</p><h2 id="容器间通信" tabindex="-1">容器间通信 <a class="header-anchor" href="#容器间通信" aria-label="Permalink to &quot;容器间通信&quot;">​</a></h2><p>项目运行时，需要多个容器的数据库、缓存等进行。</p><p>容器间需要通信。通过将容器载入到同一个网络的方式进行容器间的通信。</p><h2 id="dorker-与-kubernetes" tabindex="-1">Dorker 与 Kubernetes <a class="header-anchor" href="#dorker-与-kubernetes" aria-label="Permalink to &quot;Dorker 与 Kubernetes&quot;">​</a></h2><p>Dorker 更像是一台主机上运行。</p><p>Kubernetes 更像是在多台主机的集群上运行的。</p><p>它们都是为了方便程序员的部署和对包文件的管理。</p>',50),d=[o];function i(l,p,c,h,k,u){return r(),t("div",null,d)}const g=e(n,[["render",i]]);export{b as __pageData,g as default};
