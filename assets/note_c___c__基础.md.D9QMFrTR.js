import{_ as o,c as a,o as t,a5 as e}from"./chunks/framework.CAsUj2FB.js";const b=JSON.parse('{"title":"c++基础语法","description":"","frontmatter":{},"headers":[],"relativePath":"note/c++/c++基础.md","filePath":"note/c++/c++基础.md","lastUpdated":1713972979000}'),c={name:"note/c++/c++基础.md"},n=e('<h1 id="c-基础语法" tabindex="-1">c++基础语法 <a class="header-anchor" href="#c-基础语法" aria-label="Permalink to &quot;c++基础语法&quot;">​</a></h1><h2 id="基本类型" tabindex="-1">基本类型 <a class="header-anchor" href="#基本类型" aria-label="Permalink to &quot;基本类型&quot;">​</a></h2><p><strong>整型</strong>：char -&gt; int -&gt; long -&gt; long long。占用的字节大小由编译器决定，一般为1,4,8个字节。该顺序是运算时隐式转换的等级。</p><p><strong>浮点型</strong>：float -&gt; double-&gt; long double。占用的字节大小由编译器决定，一般为4,8个字节。该顺序是运算时隐式转换的等级。</p><h3 id="bool类型" tabindex="-1">bool类型 <a class="header-anchor" href="#bool类型" aria-label="Permalink to &quot;bool类型&quot;">​</a></h3><p>布尔类型不属于c++的基本类型，它是由编译器定义的，其值为1或0。</p><h3 id="指针类型" tabindex="-1">指针类型 <a class="header-anchor" href="#指针类型" aria-label="Permalink to &quot;指针类型&quot;">​</a></h3><p><code>*</code>这种类型占用的内存大小是4个字节，与指针修饰的变量类型无关。</p><h3 id="void类型" tabindex="-1">void类型 <a class="header-anchor" href="#void类型" aria-label="Permalink to &quot;void类型&quot;">​</a></h3><p><code>void* </code> void类型指针表示声明任意类型的指针。该指针在赋值时需要转换类型。该指针只关注指针的地址，因此在查看变量地址时，可以使用。</p><h2 id="const修饰指针" tabindex="-1">const修饰指针 <a class="header-anchor" href="#const修饰指针" aria-label="Permalink to &quot;const修饰指针&quot;">​</a></h2><p>const修饰变时，会将变量作为常量。当const修饰指针时，大有不同，有一下三种方式。</p><p><strong>常量指针</strong>：<code>const int* var = &amp;a;</code> 定义的是常量指针。常量指针不可通过通过解引用进行值的修改如<code>*var = 10</code>，但可以通过<code>a = 10</code>完成修改。常量指针可以更换指向的变量，如<code>var = &amp;b</code>，但同样不使用解引用。<strong>在函数传参时的形参使用，表明在函数内部不改变传入的值，提高代码可读性</strong></p><p><strong>指针常量</strong>：<code>int* const var = &amp;a;</code> 定义的是指针常量。指针常量可以通过<code>*var = 10</code>进行修改，与引用的作用一样。</p><p><strong>常指针常量</strong>：<code>const int* const var = &amp;a;</code> 定义的是常指针常量。常指针常量既不可通过解引用进行值的修改，也不可更换指向的变量。</p>',15),r=[n];function d(s,i,l,h,p,_){return t(),a("div",null,r)}const m=o(c,[["render",d]]);export{b as __pageData,m as default};
